# =======================================================================
# File: ludus_create_child_domain/tasks/main.yml
# Description: This role creates a new child domain in an existing AD forest.
# Security Note: 'no_log: true' is used on tasks handling credentials
#                to prevent them from being exposed in logs upon failure.
# =======================================================================
---
- name: Validate required input
  assert:
    that:
      - dns_domain_name is defined
      - parent_domain_fqdn is defined
      - ad_domain_admin is defined
      - ad_domain_admin_password is defined
      - ad_domain_safe_mode_password is defined
      - ad_domain_user_password is defined
    fail_msg: "Missing required domain configuration or credential variable(s)."

- name: Install AD DS role
  ansible.windows.win_feature:
    name: AD-Domain-Services
  register: ad_role
  check_mode: no

- name: Reboot after feature install (if required)
  ansible.windows.win_reboot:
    reboot_timeout: 600
  when: ad_role.reboot_required

- name: Promote this server to a child Domain Controller
  microsoft.ad.domain_child:
    dns_domain_name: "{{ dns_domain_name }}"
    domain_admin_user: "{{ ad_domain_admin }}@{{ parent_domain_name }}"
    domain_admin_password: "{{ ad_domain_admin_password }}"
    safe_mode_password: "{{ ad_domain_safe_mode_password }}"
    install_dns: true
    reboot: true

- name: Wait for LDAP port {{ ldap_port }} to become available
  ansible.windows.win_wait_for:
    port: "{{ ldap_port }}"
    host: "{{ ansible_host }}"
    delay: "{{ ldap_delay }}"
    timeout: "{{ ldap_timeout }}"

- name: Create default domainadmin and domainuser accounts
  microsoft.ad.user:
    identity: "{{ item.username }}"
    password: "{{ item.password }}"
    user_principal_name: "{{ item.username }}@{{ dns_domain_name }}"
    groups: "{{ item.groups }}"
    state: present
  loop:
    - { username: "domainadmin", password: "{{ ad_domain_admin_password }}", groups: "Domain Admins" }
    - { username: "domainuser",  password: "{{ ad_domain_user_password }}",  groups: "Domain Users" }
  when: promotion.changed
#  no_log: true
